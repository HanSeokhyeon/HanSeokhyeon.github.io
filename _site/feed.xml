<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-31T00:59:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Han Seokhyeon</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">gdb 사용해서 C 디버깅하기</title><link href="http://localhost:4000/gdb-tutorial/" rel="alternate" type="text/html" title="gdb 사용해서 C 디버깅하기" /><published>2019-10-31T00:32:00+09:00</published><updated>2019-10-31T00:32:00+09:00</updated><id>http://localhost:4000/gdb-tutorial</id><content type="html" xml:base="http://localhost:4000/gdb-tutorial/">&lt;p&gt;C를 개발하는데 디버깅 안할 수는 없다. 
vim을 이용해 gcc로 C 개발을 시작했고, 드디어 디버깅이 필요한 시점이 왔다.&lt;/p&gt;

&lt;h1 id=&quot;1-디버깅-시작&quot;&gt;1. 디버깅 시작&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb ./main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행파일을 gdb로 연다.&lt;/p&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GNU gdb (Ubuntu 8.1-0ubuntu3.1) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;
and &quot;show warranty&quot; for details.
This GDB was configured as &quot;x86_64-linux-gnu&quot;.
Type &quot;show configuration&quot; for configuration details.
For bug reporting instructions, please see:
&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;.
Find the GDB manual and other documentation resources online at:
&amp;lt;http://www.gnu.org/software/gdb/documentation/&amp;gt;.
For help, type &quot;help&quot;.
Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...
Reading symbols from ./main...done.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-list-명령어&quot;&gt;2. list 명령어&lt;/h1&gt;
&lt;p&gt;list 명령어는 현재 위치로부터 10줄의 코드를 출력한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2	#include &amp;lt;stdio.h&amp;gt;
3	#include &amp;lt;stdlib.h&amp;gt;
4	#include &amp;lt;math.h&amp;gt;
5	#include &amp;lt;string.h&amp;gt;
6	
7	#include &quot;common.h&quot;
8	#include &quot;synchronizer.h&quot;
9	#include &quot;secondary_path.h&quot;
10	#include &quot;anc.h&quot;
11	#include &quot;functional.h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 list 명령어를 입력할 때마다 현재 위치가 이동한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) list
12	
13	//function
14	
15	int main()
16	{
17	
18		float *secondary_path, *anc_filter;
19		
20		if (SECONDARY_PATH) {
21			////////////////////Estimate secondary path////////////////////
(gdb) list
22	
23			struct FILE_SP file_sp;
24			file_sp.err_sp = fopen(&quot;out/han/SP/error.csv&quot;, &quot;wt&quot;); // save error of estimating secondary path 
25			file_sp.f_white = fopen(&quot;data/han/SP/white_noise_11second_16k.raw&quot;, &quot;rb&quot;); // original
26			file_sp.f_reals = fopen(&quot;data/han/SP/white_16k_100.raw&quot;, &quot;rb&quot;); // recorded by FB mic
27	
28			if (USE_S_HAN){
29				char sp_name[100] = &quot;data/han/filter_tab/lpf64.csv&quot;;
30				filter_init_file(secondary_path, FILTER_TAB_SP, sp_name);
31			}
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-break-명령어&quot;&gt;3. break 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) b 28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Breakpoint 1 at 0xd92: file main.c, line 28.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 입력하면 break가 설정된다.&lt;/p&gt;

&lt;h1 id=&quot;4-run-명령어&quot;&gt;4. run 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting program: /home/hanseokhyeon/CProjects/filtered-X/main 

Breakpoint 1, main () at main.c:29
29				char sp_name[100] = &quot;data/han/filter_tab/lpf64.csv&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;r을 입력하면 break point까지 프로그램이 실행된다.&lt;/p&gt;

&lt;h1 id=&quot;5-step-명령어&quot;&gt;5. step 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30				filter_init_file(secondary_path, FILTER_TAB_SP, sp_name);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;s를 입력하면 한 줄을 실행한다.&lt;/p&gt;

&lt;h1 id=&quot;6-print-명령어&quot;&gt;6. print 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) p sp_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$1 = &quot;data/han/filter_tab/lpf64.csv&quot;, '\000' &amp;lt;repeats 70 times&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;p와 변수명을 입력하면 변수를 출력한다.&lt;/p&gt;

&lt;h1 id=&quot;7-next-명령어&quot;&gt;7. next 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.
0x00007ffff76b577d in _IO_vfscanf_internal (s=s@entry=0x5555557598f0, format=&amp;lt;optimized out&amp;gt;, 
    argptr=argptr@entry=0x7fffffffd450, errp=errp@entry=0x0) at vfscanf.c:2447
2447	vfscanf.c: 그런 파일이나 디렉터리가 없습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;n을 입력하면 다음 행을 실행한다. 그러면서 에러 발생 지점을 발견하였다. 파일이 없다한다.&lt;/p&gt;

&lt;h1 id=&quot;8-quit-명령어&quot;&gt;8. quit 명령어&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;종료다.&lt;/p&gt;

&lt;h1 id=&quot;9-display-명령어&quot;&gt;9. display 명령어&lt;/h1&gt;
&lt;p&gt;차차 공부해보자.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;https://jangpd007.tistory.com/54&quot;&gt;https://jangpd007.tistory.com/54&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">C를 개발하는데 디버깅 안할 수는 없다. vim을 이용해 gcc로 C 개발을 시작했고, 드디어 디버깅이 필요한 시점이 왔다.</summary></entry><entry><title type="html">Python과 Scipy 이용해서 FIR filter 만들기</title><link href="http://localhost:4000/python-fir-filter/" rel="alternate" type="text/html" title="Python과 Scipy 이용해서 FIR filter 만들기" /><published>2019-10-31T00:16:00+09:00</published><updated>2019-10-31T00:16:00+09:00</updated><id>http://localhost:4000/python-fir-filter</id><content type="html" xml:base="http://localhost:4000/python-fir-filter/">&lt;p&gt;Filtered-X LMS 알고리즘을 검증하는 과정에서 추정한 secondary path 대신 내가 임의로 만든 FIR filter를 넣으려고 한다. 그래서 FIR filter를 구현해야할 필요가 있었고 python과 scipy를 이용해 구현하였다. 사실 코드는 전부 참고하고 스펙만 변경하였다.&lt;/p&gt;

&lt;h1 id=&quot;1-함수-선언&quot;&gt;1. 함수 선언&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pylab import *
import scipy.signal as signal

#Plot frequency and phase response
def mfreqz(b,a=1):
    w,h = signal.freqz(b,a)
    h_dB = 20 * log10 (abs(h))
    subplot(211)
    plot(w/max(w),h_dB)
    ylim(-150, 5)
    ylabel('Magnitude (db)')
    xlabel(r'Normalized Frequency (x$\pi$rad/sample)')
    title(r'Frequency response')
    subplot(212)
    h_Phase = unwrap(arctan2(imag(h),real(h)))
    plot(w/max(w),h_Phase)
    ylabel('Phase (radians)')
    xlabel(r'Normalized Frequency (x$\pi$rad/sample)')
    title(r'Phase response')
    subplots_adjust(hspace=0.5)

#Plot step and impulse response
def impz(b,a=1):
    l = len(b)
    impulse = repeat(0.,l); impulse[0] =1.
    x = arange(0,l)
    response = signal.lfilter(b,a,impulse)
    subplot(211)
    stem(x, response)
    ylabel('Amplitude')
    xlabel(r'n (samples)')
    title(r'Impulse response')
    subplot(212)
    step = cumsum(response)
    stem(x, step)
    ylabel('Amplitude')
    xlabel(r'n (samples)')
    title(r'Step response')
    subplots_adjust(hspace=0.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 FIR filter의 frequency, phase, impulse, step response를 plot하는 함수이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n = 64
a = signal.firwin(n, cutoff = 0.3, window = &quot;hamming&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;scipy.signal.firwin 함수를 통해 FIR filter를 생성하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Frequency and phase response
mfreqz(a)
show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;br /&gt;
&lt;img src=&quot;/assets/images/lpf_spec2.png&quot; alt=&quot;lpf_spec2&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impz(a)
show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;br /&gt;
&lt;img src=&quot;/assets/images/lpf_spec.png&quot; alt=&quot;lpf_spec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림과 같이 LPF가 잘 생성되었다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;http://mpastell.com/pweave/_downloads/FIR_design_rst.html&quot;&gt;http://mpastell.com/pweave/_downloads/FIR_design_rst.html&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">Filtered-X LMS 알고리즘을 검증하는 과정에서 추정한 secondary path 대신 내가 임의로 만든 FIR filter를 넣으려고 한다. 그래서 FIR filter를 구현해야할 필요가 있었고 python과 scipy를 이용해 구현하였다. 사실 코드는 전부 참고하고 스펙만 변경하였다.</summary></entry><entry><title type="html">리눅스 명령어 cd, ls, mkdir, cp, rm, mv</title><link href="http://localhost:4000/linux-command/" rel="alternate" type="text/html" title="리눅스 명령어 cd, ls, mkdir, cp, rm, mv" /><published>2019-10-30T16:12:00+09:00</published><updated>2019-10-30T16:12:00+09:00</updated><id>http://localhost:4000/linux-command</id><content type="html" xml:base="http://localhost:4000/linux-command/">&lt;p&gt;리눅스를 쓰다보면 명령어 공부가 자동으로 된다.&lt;/p&gt;

&lt;h1 id=&quot;1-현재-위치에-있는-파일과-디렉토리-출력-ls&quot;&gt;1. 현재 위치에 있는 파일과 디렉토리 출력 ls&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~$ ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ANC                                        idea-IU-191.6707.61
Android                                    myblog
AndroidStudioProjects                      naver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;와 같이 리스트가 출력된다. 이후 가고 싶은 곳으로 이동하자.&lt;/p&gt;

&lt;h1 id=&quot;2-현재-위치-이동-cd&quot;&gt;2. 현재 위치 이동 cd&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [가고자 하는 디렉토리]
~$ cd ANC
~/ANC$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 현재 위치가 이동된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/ANC$ cd ..
~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;..은 상위 디렉토리를 의미한다.&lt;/p&gt;

&lt;h1 id=&quot;3-디렉토리-생성-mkdir&quot;&gt;3. 디렉토리 생성 mkdir&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir [디렉토리 이름]
mkdir filtered-X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 디렉토리가 생성된다.&lt;/p&gt;

&lt;h1 id=&quot;4-파일-디렉토리-복사-cp&quot;&gt;4. 파일, 디렉토리 복사 cp&lt;/h1&gt;
&lt;p&gt;단순하게&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp [원래 위치의 파일] [옮길 위치]
cp ~/ANC/v2.3.0_16k/main.c ~/CProjects/filtered-X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로 하면 원래 위치의 파일이 옮길 위치로 복사된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp [원래 위치/*] [옮길 위치]
cp ~/ANC/v2.3.0_16k/* ~/CProjects/filtered-X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원래 위치의 모든 파일이 옮길 위치로 복사된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp -r [원래 위치] [옮길 위치]
cp -r ~/ANC/v2.3.0_16k ~/CProjects/filtered-X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원래 위치 디렉토리가 옮길 위치로 이동된다.&lt;/p&gt;

&lt;h1 id=&quot;5-파일-디렉토리-제거&quot;&gt;5. 파일, 디렉토리 제거&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm [파일 이름]
rm main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;파일 삭제&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -f main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;파일 강제 삭제&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -r filtered-X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;디렉토리 삭제&lt;/p&gt;

&lt;h1 id=&quot;6-파일-디렉토리-이름-변경&quot;&gt;6. 파일, 디렉토리 이름 변경&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv [변경전 이름] [변경할 이름]
mv filtered-X filtered-X_no_secondary_path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 디렉토리의 이름이 변경된다. 사실 mv는 파일이나 디렉토리를 이동시키는 명령어다. 여기서 나는 파일, 디렉토리 이름 변경이 이동으로 이뤄진다는 걸 깨달았다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;https://webisfree.com/2018-02-05/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%BC-%ED%8F%B4%EB%8D%94-%EC%9D%B4%EB%A6%84-%EB%B0%94%EA%BE%B8%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;https://webisfree.com/2018-02-05/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-%ED%8C%8C%EC%9D%BC-%ED%8F%B4%EB%8D%94-%EC%9D%B4%EB%A6%84-%EB%B0%94%EA%BE%B8%EB%8A%94-%EB%B0%A9%EB%B2%95&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.manualfactory.net/10805&quot;&gt;https://www.manualfactory.net/10805&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://webdir.tistory.com/140&quot;&gt;https://webdir.tistory.com/140&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">리눅스를 쓰다보면 명령어 공부가 자동으로 된다.</summary></entry><entry><title type="html">gcc 모듈 c 파일 이용해 컴파일하기</title><link href="http://localhost:4000/gcc-module/" rel="alternate" type="text/html" title="gcc 모듈 c 파일 이용해 컴파일하기" /><published>2019-10-30T12:47:00+09:00</published><updated>2019-10-30T12:47:00+09:00</updated><id>http://localhost:4000/gcc-module</id><content type="html" xml:base="http://localhost:4000/gcc-module/">&lt;p&gt;당연히 c 개발을 하면 c파일과 header파일로 파일을 분할해서 관리한다. 그래서 main.c와 모듈이 되는 c파일을 같이 컴파일하는 방법에 대해 알아보았다.&lt;/p&gt;

&lt;h1 id=&quot;1-file-준비&quot;&gt;1. file 준비&lt;/h1&gt;
&lt;p&gt;현 나의 상황으로는&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;main.c&lt;/li&gt;
  &lt;li&gt;anc.c, anc.h&lt;/li&gt;
  &lt;li&gt;functional.c, functional.h&lt;/li&gt;
  &lt;li&gt;secondary_path.c, secondary_path.h&lt;/li&gt;
  &lt;li&gt;synchronizer.c, synchronizer.h&lt;/li&gt;
  &lt;li&gt;common.h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;로 프로젝트가 이루어져 있다.&lt;br /&gt;
모두 같은 디렉토리에 존재한다. header file들은 현재 디렉토리에 꼭 존재해야 한다.&lt;/p&gt;

&lt;p&gt;Visual studio에서는 common.h에서 stdlib.h 등 필수 헤더파일들을 include했지만 리눅스에서 gcc를 이용해 컴파일할 때는 common.h의 #include를 인식하지 못해 각 c 파일마다 수정해주었다.&lt;/p&gt;

&lt;p&gt;가장 먼저 무식하게 main object를 만들어보았다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o main main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main.c: In function ‘main’:
main.c:44:2: warning: implicit declaration of function ‘fcloseall’; did you mean ‘fclose’? [-Wimplicit-function-declaration]
  fcloseall();
  ^~~~~~~~~
  fclose
/tmp/ccORf9Gr.o: In function `main':
main.c:(.text+0x7d): undefined reference to `Synchronizer'
main.c:(.text+0x91): undefined reference to `estimate_secondary_path'
main.c:(.text+0xbd): undefined reference to `save_filter'
main.c:(.text+0x361): undefined reference to `check_file_length'
main.c:(.text+0x3da): undefined reference to `cancel_noise'
collect2: error: ld returned 1 exit status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;당연히 모듈에 존재하는 함수들이 define 되지 않았다고 에러를 출력하였다. 또한 fcloseall();에 대해 warning을 출력하기에 구글링해보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;#define _GNU_SOURCE&lt;/code&gt;를 삽입해주면 된다해서 수정하였더니 정말 사라졌다.&lt;/p&gt;

&lt;p&gt;이제 제대로 된 명령어를 입력하였다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o main -g main.c synchronizer.c anc.c functional.c secondary_path.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;-o는 object 파일의 이름을 넣어주는 옵션이고 -g는 컴파일 후 링크까지 해 실행파일을 만드는 옵션이다.&lt;/p&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/tmp/ccKfl5g7.o: In function `cancel_noise':
/home/hanseokhyeon/ANC/v2.3.0_16k/anc.c:49: undefined reference to `floor'
/home/hanseokhyeon/ANC/v2.3.0_16k/anc.c:86: undefined reference to `pow'
/home/hanseokhyeon/ANC/v2.3.0_16k/anc.c:109: undefined reference to `floor'
/home/hanseokhyeon/ANC/v2.3.0_16k/anc.c:110: undefined reference to `floor'
/tmp/cckOEKHk.o: In function `gaussianRandom':
/home/hanseokhyeon/ANC/v2.3.0_16k/functional.c:52: undefined reference to `log'
/home/hanseokhyeon/ANC/v2.3.0_16k/functional.c:52: undefined reference to `sqrt'
collect2: error: ld returned 1 exit status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러나 floor, pow, log, sqrt 함수가 define 되지 않았다고 에러를 출력하였다. 그렇다. 모두 math.h의 함수들이다. 그래서 구글링해보니 -lm이라는 옵션에 대한 정보를 찾아볼 수 있었다. -lm은 수학 라이브러리 옵션으로 수학 라이브러리를 include해준다.&lt;/p&gt;

&lt;p&gt;다시 제대로&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o main -g main.c synchronizer.c anc.c functional.c secondary_path.c -lm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;하니 머 warning이 이것저것 뜨나 별거아니므로 무시했다. 여튼 실행파일이 만들어졌다.&lt;/p&gt;

&lt;p&gt;이제 실행해보자&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Secondary path processing : 32000
processing : 32000ite   white
processing : 32000ite   white
processing : 32000ite   white
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 작동하였다. (숫자 뒤에 ite는 쓴적 없는거 같은데…) 역시나 다른 코드들과 마찬가지로 같은 코드를 돌렸을 때 속도가 눈에 띌 정도로 리눅스가 빨랐다. 이래서 쓰는건가. 아직 vim으로 편집하는 것이 어색하나 그래도 실제 많은 개발자들이 간단하게 vim을 이용해서 프로그래밍을 하는 경우가 종종 있기때문에 나도 연습해야겠다. 또한 gdb?를 이용해 디버깅하는 방법에 대해서도 알아봐야겠다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;https://thrillfighter.tistory.com/101&quot;&gt;https://thrillfighter.tistory.com/101&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://askubuntu.com/questions/332884/how-to-compile-a-c-program-that-uses-math-h&quot;&gt;https://askubuntu.com/questions/332884/how-to-compile-a-c-program-that-uses-math-h&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">당연히 c 개발을 하면 c파일과 header파일로 파일을 분할해서 관리한다. 그래서 main.c와 모듈이 되는 c파일을 같이 컴파일하는 방법에 대해 알아보았다.</summary></entry><entry><title type="html">gcc 설치 및 사용법</title><link href="http://localhost:4000/gcc-tutorial/" rel="alternate" type="text/html" title="gcc 설치 및 사용법" /><published>2019-10-29T16:37:17+09:00</published><updated>2019-10-29T16:37:17+09:00</updated><id>http://localhost:4000/gcc-tutorial</id><content type="html" xml:base="http://localhost:4000/gcc-tutorial/">&lt;p&gt;리눅스에서 C언어 개발 환경을 구축하기 위해 gcc를 사용해본다.&lt;/p&gt;

&lt;h1 id=&quot;1-설치&quot;&gt;1. 설치&lt;/h1&gt;

&lt;p&gt;보통 우분투를 설치하면 gcc는 설치되어있다.
아래의 명령어를 통해 설치여부를 확인해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc: fatal error: no input files
compilation terminated.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 나오면 설치되어 있는 것이다.
버젼을 확인해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러하다.&lt;/p&gt;

&lt;p&gt;만약 설치가 안되어 있다면&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 통해 설치하자.&lt;/p&gt;

&lt;h1 id=&quot;2-testc&quot;&gt;2. test.c&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim test.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 터미널에 쳐서 test.c 파일을 만들 준비를 하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/testc.png&quot; alt=&quot;testc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;vim 단축키를 잠시 설명하자면 a는 입력모드, ESC는 모드 나가기, x는 지우기, :wq는 저장후 종료다.&lt;/p&gt;

&lt;p&gt;:wq를 했으면 아마 home에 test.c가 생겼을 것이다. 
ls 명령어로 각자 확인하자.
이제 gcc 컴파일러를 통해 object 파일을 생성해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o test test.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성한 후 ls 명령어로 test라는 object 파일이 생성된 것을 확인해보자.
생성이 되었다면 파일을 실행해보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 실행된다.&lt;br /&gt;
Visual studio라는 강력한 IDE를 사용하다보니 vim로 C code를 개발하기는 매우 불편할 수 있다. 하지만 많은 IT회사가 C를 리눅스 기반으로 개발하니 피해갈 수 없는 도전이라고 생각한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:
&lt;a href=&quot;https://byd0105.tistory.com/9&quot;&gt;https://byd0105.tistory.com/9&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">리눅스에서 C언어 개발 환경을 구축하기 위해 gcc를 사용해본다.</summary></entry><entry><title type="html">tmux 사용법</title><link href="http://localhost:4000/tmux-tutorial/" rel="alternate" type="text/html" title="tmux 사용법" /><published>2019-10-22T04:30:17+09:00</published><updated>2019-10-22T04:30:17+09:00</updated><id>http://localhost:4000/tmux-tutorial</id><content type="html" xml:base="http://localhost:4000/tmux-tutorial/">&lt;p&gt;ssh server를 이용할 때 로컬에서 터미널을 끄면 서버와의 연결이 끊기며 서버에 프로그램이 종료되는 것이 불편하다. 
하지만 tmux를 이용하면 터미널을 꺼도 연결이 끊어지지 않으며 프로그램이 서버에서 계속 작동한다. 
그래서 tmux를 사용하고 사용법을 알아보고자 한다.&lt;/p&gt;

&lt;h1 id=&quot;1-설치&quot;&gt;1. 설치&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;매우 간단.&lt;/p&gt;

&lt;h1 id=&quot;2-실행&quot;&gt;2. 실행&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;매우 간단.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tmux.png&quot; alt=&quot;tmux&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-ssh-server-접속&quot;&gt;3. ssh server 접속&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh han@123.123.12.12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;br /&gt;
&lt;img src=&quot;/assets/images/ssh_server.png&quot; alt=&quot;ssh_server&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-run&quot;&gt;4. Run&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/run_ssh.png&quot; alt=&quot;run_ssh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;터졌지만 중요한게 아니기에…&lt;/p&gt;

&lt;h1 id=&quot;5-log-off&quot;&gt;5. Log-off&lt;/h1&gt;

&lt;p&gt;Ctrl + b 누른 후 d를 누르면 log-off 된다. 터미널이 꺼진 것처럼 보이지만 사실 꺼진 것이 아니다.&lt;/p&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[detached (from session 0)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/log-off.png&quot; alt=&quot;log-off&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6-attach&quot;&gt;6. Attach&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmux attach
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 입력하면 다시 터미널로 돌아가게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/attach.png&quot; alt=&quot;attach&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;https://dgkim5360.tistory.com/entry/the-first-steps-for-tmux-terminal-multiplexer&quot;&gt;https://dgkim5360.tistory.com/entry/the-first-steps-for-tmux-terminal-multiplexer&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://m.blog.naver.com/kimmingul/221339305735&quot;&gt;https://m.blog.naver.com/kimmingul/221339305735&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">ssh server를 이용할 때 로컬에서 터미널을 끄면 서버와의 연결이 끊기며 서버에 프로그램이 종료되는 것이 불편하다. 하지만 tmux를 이용하면 터미널을 꺼도 연결이 끊어지지 않으며 프로그램이 서버에서 계속 작동한다. 그래서 tmux를 사용하고 사용법을 알아보고자 한다.</summary></entry><entry><title type="html">Ubuntu ssh 서버 구축하기</title><link href="http://localhost:4000/ssh-server/" rel="alternate" type="text/html" title="Ubuntu ssh 서버 구축하기" /><published>2019-10-22T03:30:17+09:00</published><updated>2019-10-22T03:30:17+09:00</updated><id>http://localhost:4000/ssh-server</id><content type="html" xml:base="http://localhost:4000/ssh-server/">&lt;p&gt;연구실 서버 컴퓨터에서 docker를 이용해야 할 상황이 생겼다. 그래서 ssh를 이용해 로컬에서 서버로 접속해 docker를 사용하기 위해 ssh 서버 사용하는 법을 공부했고 정리한다.&lt;/p&gt;

&lt;h1 id=&quot;1-ssh-설치&quot;&gt;1. ssh 설치&lt;/h1&gt;

&lt;p&gt;ubuntu에 로컬로 사용하기 위한 클라이언트 프로그램은 존재하지만 openssh-server는 없다. 그래서 설치가 필요하다. 업데이트 후 설치한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-ssh-서버-서비스-시작&quot;&gt;2. ssh 서버 서비스 시작&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service ssh start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;서버를 실행한 후&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service ssh status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로 상태확인을 해보자.&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;● ssh.service - OpenBSD Secure Shell server
   Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enab
   Active: active (running) since Tue 2019-10-22 14:39:25 KST; 27min ago
 Main PID: 4635 (sshd)
    Tasks: 1 (limit: 4915)
   CGroup: /system.slice/ssh.service
           └─4635 /usr/sbin/sshd -D

10월 22 14:39:25 han-desktop systemd[1]: Starting OpenBSD Secure Shell server...
10월 22 14:39:25 han-desktop sshd[4635]: Server listening on 0.0.0.0 port 22.
10월 22 14:39:25 han-desktop sshd[4635]: Server listening on :: port 22.
10월 22 14:39:25 han-desktop systemd[1]: Started OpenBSD Secure Shell server.
10월 22 14:39:57 han-desktop sshd[5419]: Did not receive identification string f
10월 22 14:59:13 han-desktop sshd[5472]: Did not receive identification string f
10월 22 14:59:14 han-desktop sshd[5473]: pam_unix(sshd:auth): authentication fai
10월 22 14:59:16 han-desktop sshd[5473]: Failed password for root from 185.197.7
10월 22 14:59:18 han-desktop sshd[5473]: Connection closed by authenticating use
lines 1-17/17 (END)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -ef | grep sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로 실행중인 ssh 서버의 프로세스를 확인할 수 있다.&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root      4635     1  0 14:39 ?        00:00:00 /usr/sbin/sshd -D
han       5631  3459  0 15:08 pts/0    00:00:00 grep --color=auto sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo netstat -ntlp | grep sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로 ip주소와 port 번호를 확인할 수 없다.&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      4635/sshd           
tcp6       0      0 :::22                   :::*                    LISTEN      4635/sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;netstat가 없는 경우는&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install net-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로 설치 후 다시 확인.&lt;/p&gt;

&lt;h1 id=&quot;3-내부-ip-주소-확인&quot;&gt;3. 내부 IP 주소 확인&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 통해 현재 서버 컴퓨터에 할당된 IP 주소를 알 수 있다.&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 123.456.7.890  netmask 123.456.7.890  broadcast 123.456.7.890
        ether 02:42:82:b5:22:84  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp0s31f6: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.268.1.123  netmask 123.456.7.890  broadcast 123.456.7.890
        inet6 fe80::4f6c:76d6:b51f:aed9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 70:85:c2:69:98:df  txqueuelen 1000  (Ethernet)
        RX packets 264847  bytes 25393804 (25.3 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 2474  bytes 257398 (257.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 16  memory 0xdf100000-df120000  

lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 530  bytes 48618 (48.6 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 530  bytes 48618 (48.6 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker0는 무시하고 enp0s31f6:에 inet 다음에 있는 것이 내부 IP 주소다.&lt;/p&gt;

&lt;h1 id=&quot;4-ssh-서버-접속하기&quot;&gt;4. ssh 서버 접속하기&lt;/h1&gt;

&lt;p&gt;준비가 끝났다. 이제 접속하자. 로컬에서&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh [username]@[Hostname]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;와 같이 접속하면 된다&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh han@192.268.1.123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host '192.268.1.123 (192.268.1.123)' can't be established.
ECDSA key fingerprint is --------------------------.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.268.1.123' (ECDSA) to the list of known hosts.
han@192.268.1.123's password: 
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.0.0-32-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

 * Kata Containers are now fully integrated in Charmed Kubernetes 1.16!
   Yes, charms take the Krazy out of K8s Kata Kluster Konstruction.

     https://ubuntu.com/kubernetes/docs/release-notes

 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch

패키지 0개를  업데이트할 수 있습니다.
0 업데이트는 보안 업데이트입니다.

Your Hardware Enablement Stack (HWE) is supported until April 2023.

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

han@han-desktop:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;접속에 성공했다.&lt;/p&gt;

&lt;h1 id=&quot;5-끝내기&quot;&gt;5. 끝내기&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;로그아웃
Connection to 192.268.1.123 closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;6-추가&quot;&gt;6. 추가&lt;/h1&gt;

&lt;p&gt;기본 포트 22번을 이용하면 보안에 취약하다고들 한다.
그래서 22를 자신만의 특별한 숫자로 바꾸는 것도 추천한다.
또한 openssh의 기본 설정으로 비밀번호와 함께 root 권한으로 접속할 수 있다.
하지만 단순하게 프로그램을 돌릴 계획인데 root 권한은 필요 없을 뿐더러 보안에 악영향을 끼칠 수 있으므로 금지시키는 것도 좋다.
public key?라 해서 파일형태로 key를 가지고 접속하는 방법도 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;https://jimnong.tistory.com/713&quot;&gt;https://jimnong.tistory.com/713&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://cupjoo.tistory.com/98&quot;&gt;https://cupjoo.tistory.com/98&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=ares157&amp;amp;logNo=220984809651&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=ares157&amp;amp;logNo=220984809651&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">연구실 서버 컴퓨터에서 docker를 이용해야 할 상황이 생겼다. 그래서 ssh를 이용해 로컬에서 서버로 접속해 docker를 사용하기 위해 ssh 서버 사용하는 법을 공부했고 정리한다.</summary></entry><entry><title type="html">docker 설치하고 jupyter notebook으로 tensorflow하기</title><link href="http://localhost:4000/docker-tutorial/" rel="alternate" type="text/html" title="docker 설치하고 jupyter notebook으로 tensorflow하기" /><published>2019-10-22T02:30:17+09:00</published><updated>2019-10-22T02:30:17+09:00</updated><id>http://localhost:4000/docker-tutorial</id><content type="html" xml:base="http://localhost:4000/docker-tutorial/">&lt;p&gt;로컬이 아닌 공동으로 사용하는 서버에서 딥러닝을 해야할 경우 버젼 충돌 문제가 발생하게 된다. 
내가 사용하는 TF나 PyTorch 버젼이 다른 사람과 다르다면 docker를 사용하여 환경을 구축하는 것을 추천한다.&lt;/p&gt;

&lt;h1 id=&quot;1-설치-ubuntu&quot;&gt;1. 설치 (Ubuntu)&lt;/h1&gt;

&lt;p&gt;자동 설치 스크립트를 이용해서 설치!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -fsSL https://get.docker.com/ | sudo sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-root-권한-없이-docker-사용하기&quot;&gt;2. root 권한 없이 docker 사용하기&lt;/h1&gt;

&lt;p&gt;docker는 root권한을 필요로해서 sudo를 추가해주고 비밀번호를 매번 요구한다. 귀찮으므로 없앤다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;재부팅하면 적용완료.&lt;/p&gt;

&lt;h1 id=&quot;3-설치-확인&quot;&gt;3. 설치 확인&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Client: Docker Engine - Community
 Version:           19.03.4
 API version:       1.40
 Go version:        go1.12.10
 Git commit:        9013bf583a
 Built:             Fri Oct 18 15:54:09 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.4
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.10
  Git commit:       9013bf583a
  Built:            Fri Oct 18 15:52:40 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 2번을 실행하고 재부팅을 하지 않았다면 Server 정보가 나오지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;4-run-tensorflow-공식-이미지&quot;&gt;4. Run TensorFlow 공식 이미지&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it -p 8888:8888 tensorflow/tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아마 tensorflow/tensorflow docker이미지가 없을것이기 때문에 설치를 장시간 진행할 것이다. tensorflow/tensorflow 이미지는 tensorflow cpu 버전이며 원래는 jupyter notebook이 자동으로 실행된다고 했는데 나는 이상하게 안됐다…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it -p 8888:8888 tensorflow/tensorflow

________                               _______________                
___  __/__________________________________  ____/__  /________      __
__  /  _  _ \_  __ \_  ___/  __ \_  ___/_  /_   __  /_  __ \_ | /| / /
_  /   /  __/  / / /(__  )/ /_/ /  /   _  __/   _  / / /_/ /_ |/ |/ / 
/_/    \___//_/ /_//____/ \____//_/    /_/      /_/  \____/____/|__/


WARNING: You are running this container as root, which can cause new files in
mounted volumes to be created as the root user on your host machine.

To avoid this, run the container by specifying your user's userid:

$ docker run -u $(id -u):$(id -g) args...

root@ae73f71e625d:/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 실행이 되고 터미널이 떴다.&lt;/p&gt;

&lt;p&gt;이후 jupyter notebook을 실행해보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ae73f71e625d:/# jupyter notebook
bash: jupyter: command not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 없단다. 그래서 설치를 해줬다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 python 버전은 2.7이다. jupyter notebook 설치 이후 실행해보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socket.error: [Errno 99] Cannot assign requested address
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;머라머라 에러가 난다. 위에서 pip를 업그레이드 하라는 경고를 줬기때문에 업그레이드해줬다. 하지만 그래도 에러가 난다. 아마 업데이트를 해줘야하는듯하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker에서 터미널에 sudo를 치면 없는 명령어라고 하더라. 그래도 안되서 찾아보니깐 local에서 실행 안해서 IP가 안맞는다뭐라나… 결론은 이거다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook --ip=0.0.0.0 --allow-root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[I 05:01:58.014 NotebookApp] Serving notebooks from local directory: /
[I 05:01:58.014 NotebookApp] The Jupyter Notebook is running at:
[I 05:01:58.014 NotebookApp] http://(ae73f71e625d or 127.0.0.1):8888/?token=54bc8c34b32e8fa4d3227284afe146c779f9327be4107b52
[I 05:01:58.014 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 05:01:58.020 NotebookApp] No web browser found: could not locate runnable browser.
[C 05:01:58.020 NotebookApp] 
    
    To access the notebook, open this file in a browser:
        file:///root/.local/share/jupyter/runtime/nbserver-411-open.html
    Or copy and paste one of these URLs:
        http://(ae73f71e625d or 127.0.0.1):8888/?token=54bc8c34b32e8fa4d3227284afe146c779f9327be4107b52
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 마지막에 URLs를 알려주는데 주소에 or이 있다. http://127.0.0.1:8888/?token=54bc8c34b32e8fa4d3227284afe146c779f9327be4107b52 와 같이 앞부분 없애고 실행하니 정상작동한다.&lt;/p&gt;

&lt;p&gt;휴…&lt;/p&gt;

&lt;h1 id=&quot;5-tensorflow-hello-world-예제&quot;&gt;5. TensorFlow hello world 예제&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf

hello = tf.constant('Hello, TensorFlow!')

sess = tf.Session()

print(sess.run(hello))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별 생각없이 실행했더니 Session()이 없는 거란다. 그렇다 tensorflow 2.0이다.(안써봄 ㅎ)&lt;/p&gt;

&lt;p&gt;공홈에서 예제를 가져왔다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'relu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'softmax'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'adam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;loss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sparse_categorical_crossentropy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'accuracy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epochs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11493376/11490434 [==============================] - 1s 0us/step
11501568/11490434 [==============================] - 1s 0us/step
Train on 60000 samples
Epoch 1/5
60000/60000 [==============================] - 13s 216us/sample - loss: 0.2952 - accuracy: 0.9141
Epoch 2/5
60000/60000 [==============================] - 11s 181us/sample - loss: 0.1423 - accuracy: 0.9574
Epoch 3/5
60000/60000 [==============================] - 11s 188us/sample - loss: 0.1058 - accuracy: 0.9686
Epoch 4/5
60000/60000 [==============================] - 11s 191us/sample - loss: 0.0855 - accuracy: 0.9735
Epoch 5/5
60000/60000 [==============================] - 13s 217us/sample - loss: 0.0734 - accuracy: 0.9766
10000/1 - 1s - loss: 0.0362 - accuracy: 0.9782

[0.07176612680561374, 0.9782]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘된다.&lt;/p&gt;

&lt;h1 id=&quot;6-docker-container-commit하기&quot;&gt;6. Docker container commit하기&lt;/h1&gt;
&lt;p&gt;기껏 jupyter notebook 다 설치했는데 날릴 수 없다. 그러므로 docker 종료 전에 이미지에 commit해서 변경사항을 등록해줘야한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 입력해 이미지를 확인하면&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
tensorflow/tensorflow   latest              d64a95598d6c        2 weeks ago         1.03GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;와 같은 식으로 이미지의 내용이 출력된다. commit을 하기 위해서는 container의 ID가 필요하다. 아래의 명령어를 사용하면 알 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS                    PORTS                    NAMES
ae73f71e625d        tensorflow/tensorflow   &quot;/bin/bash&quot;         About an hour ago   Up About an hour          0.0.0.0:8888-&amp;gt;8888/tcp   pensive_buck
f585a03cd7ae        tensorflow/tensorflow   &quot;/bin/bash&quot;         19 hours ago        Exited (0) 19 hours ago                            wizardly_haslett
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;복잡해 보이지만 첫번재 있는게 container ID다. 복사한후&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker commit ae73f71e625d tensorflow/tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sha256:b47a8c553c49e9f8db060811feba1ad69725390580f1112a37d68927d7b2938c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;라는 결과를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;다시&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 입력하면&lt;br /&gt;
output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
tensorflow/tensorflow   latest              b47a8c553c49        8 seconds ago       1.15GB
tensorflow/tensorflow   &amp;lt;none&amp;gt;              d64a95598d6c        2 weeks ago         1.03GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 얻을 수 있고, 8초전에 하나 추가되었다. SIZE가 증가한거 보니 제대로 된거 같다. 귀찮아서 테스트 안해본건 아니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;출처:&lt;br /&gt;
&lt;a href=&quot;http://moducon.kr/2018/wp-content/uploads/sites/2/2018/12/leesangsoo_slide.pdf&quot;&gt;http://moducon.kr/2018/wp-content/uploads/sites/2/2018/12/leesangsoo_slide.pdf&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.tensorflow.org/install/docker?hl=ko&quot;&gt;https://www.tensorflow.org/install/docker?hl=ko&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.tensorflow.org/tutorials/quickstart/beginner&quot;&gt;https://www.tensorflow.org/tutorials/quickstart/beginner&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://pbj0812.tistory.com/134&quot;&gt;https://pbj0812.tistory.com/134&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html&quot;&gt;https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html&lt;/a&gt;
&lt;a href=&quot;https://nicewoong.github.io/development/2018/03/06/docker-commit-container/&quot;&gt;https://nicewoong.github.io/development/2018/03/06/docker-commit-container/&lt;/a&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">로컬이 아닌 공동으로 사용하는 서버에서 딥러닝을 해야할 경우 버젼 충돌 문제가 발생하게 된다. 내가 사용하는 TF나 PyTorch 버젼이 다른 사람과 다르다면 docker를 사용하여 환경을 구축하는 것을 추천한다.</summary></entry><entry><title type="html">docker 볼륨 공유</title><link href="http://localhost:4000/docker-share-volume/" rel="alternate" type="text/html" title="docker 볼륨 공유" /><published>2019-10-22T01:30:17+09:00</published><updated>2019-10-22T01:30:17+09:00</updated><id>http://localhost:4000/docker-share-volume</id><content type="html" xml:base="http://localhost:4000/docker-share-volume/">&lt;p&gt;docker를 사용할 때 필요한 데이터는 호스트와 공유해서 사용하는 것이 편리하다. 그러므로 docker의 볼륨 공유 기능을 사용해서 폴더나 파일을 호스트와 컨테이너 간에 공유한다.&lt;/p&gt;

&lt;h1 id=&quot;1-공유할-폴더와-파일-생성&quot;&gt;1. 공유할 폴더와 파일 생성&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir docker_share
cd docker_share
vi test.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/testpy.png&quot; alt=&quot;testpy&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-docker-run&quot;&gt;2. docker run&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">docker를 사용할 때 필요한 데이터는 호스트와 공유해서 사용하는 것이 편리하다. 그러므로 docker의 볼륨 공유 기능을 사용해서 폴더나 파일을 호스트와 컨테이너 간에 공유한다.</summary></entry><entry><title type="html">파이썬에서 librosa 패키지로 스펙트럼 그리기</title><link href="http://localhost:4000/plot-spectrum/" rel="alternate" type="text/html" title="파이썬에서 librosa 패키지로 스펙트럼 그리기" /><published>2019-10-18T16:30:17+09:00</published><updated>2019-10-18T16:30:17+09:00</updated><id>http://localhost:4000/plot-spectrum</id><content type="html" xml:base="http://localhost:4000/plot-spectrum/">&lt;p&gt;프로젝트에서 파형의 스펙트럼을 그려서 분석할 일이 있어 코드를 작성해보았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-load-normalization&quot;&gt;data load, normalization&lt;/h3&gt;

&lt;p&gt;내가 사용한 파일이 raw 파일이라 아래와 같은 방식으로 데이터를 읽었다. 
librosa 패키지는 함수의 입력으로 -1 ~ 1로 노말라이즈된 데이터를 사용하기 때문에 32767로 나누어주었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2&quot;&gt;data = np.fromfile(&quot;ANC_X_8k/boeing_FF.raw&quot;, dtype=np.int16)
data = data.astype(np.float) / 32767
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spectrogram-amplitude-db&quot;&gt;spectrogram, amplitude, dB&lt;/h3&gt;

&lt;p&gt;librosa.stft()는 data의 스펙트로그램을 리턴한다. 
여기서 n_fft로 FFT 사이즈를 설정할 수 있다.
스펙트로그램은 복소수로 리턴되므로 np.abs를 이용해서 amplitude로 바꿔준다. 
librosa.amplitude_to_db()를 이용해 스펙트로그램을 dB 스케일로 바꿔준다.
원칙상으론 데이터의 길이만큼 fft를 하면 됐으나 편의상 스펙트로그램의 평균으로 대체하였다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2&quot;&gt;data = librosa.stft(data[sample_rate // 4:sample_rate // 4 * 2], n_fft=n_fft)
data = np.mean(librosa.amplitude_to_db(np.abs(data)), axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음은 pyplot을 이용해 plot하는 과정이므로 전체 코드를 참고하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;전체-코드&quot;&gt;전체 코드&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2&quot;&gt;import numpy as np
import librosa
import matplotlib.pyplot as plt


sample_rate = 8000
n_fft = 512

data = np.fromfile(&quot;ANC_X_8k/boeing_FF.raw&quot;, dtype=np.int16)
data = data.astype(np.float) / 32767
data = librosa.stft(data[sample_rate // 4:sample_rate // 4 * 2], n_fft=n_fft)
data = np.mean(librosa.amplitude_to_db(np.abs(data)), axis=1)

plt.title('boeing')

plt.xlabel(&quot;Frequency[Hz]&quot;)
plt.xticks(range(0, n_fft//2+1, 32), np.arange(0, 4001, 500))
plt.xlim(0, n_fft//2)

plt.ylabel(&quot;Amplitude[dB]&quot;)

plt.plot(data, label='data', alpha=0.7)

plt.grid()
plt.legend()

fig = plt.gcf()

plt.show()
fig.savefig('boeing.png')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결과물&quot;&gt;결과물&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/boeing.png&quot; alt=&quot;boeing&quot; /&gt;&lt;/p&gt;</content><author><name>HanSeokhyeon</name></author><category term="blog" /><summary type="html">프로젝트에서 파형의 스펙트럼을 그려서 분석할 일이 있어 코드를 작성해보았다.</summary></entry></feed>